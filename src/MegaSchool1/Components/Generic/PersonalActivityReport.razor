@typeparam TPipeline where TPipeline : struct, Enum
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using MegaSchool1.Model
@using MegaSchool1.Repository.Model
@using MegaSchool1.ViewModel
@using MudBlazor.Utilities
@inherits Components.ComponentBase
@inject UISettings UI
@inject Repository.Repository Repo
@inject ILocalStorageService LocalStorage

<MudDropContainer T="Prospect" @ref="_dropContainer" Items="@_prospects" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="OnProspectStatusChanged" Class="d-flex flex-grow-1 overflow-x-scroll">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
					<MudStack Row="true">
						<MudSpacer/>
						<MudText Typo="Typo.subtitle1" Align="Align.Center"><b>@((MarkupString)item.DisplayName.Replace(Environment.NewLine, "<br/>"))</b></MudText>
						<MudSpacer />
					</MudStack>
					@if(false)
					{
						<MudSpacer />
						<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
							<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
							<MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename Section</MudButton>
						</MudMenu>
					}
				</MudToolBar>
				@if (item.AllowNewTasks)
				{
					@if (item.NewTaskOpen)
					{
						<MudPaper Elevation="25" Class="pa-2 rounded-lg">
							<MudTextField @bind-Value="item.NewTaskName" Placeholder="Prospect" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
							<MudButton OnClick="@(() => AddProspect(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Prospect</MudButton>
						</MudPaper>
					}
					else
					{
						<MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Prospect</MudButton>
					}
				}
				<MudDropZone T="Prospect" Identifier="@item.Id" AllowReorder="true" Class="mud-height-full" />
			</MudPaper>
		}
		@if(false)
		{
			<MudPaper Class="pa-4" Elevation="0" Width="224px">
				@if (_addSectionOpen)
				{
					<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
						<EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
							<DataAnnotationsValidator />
							<MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
							<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
						</EditForm>
					</MudPaper>
				}
				else
				{
					<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
				}
			</MudPaper>
		}
	</ChildContent>
	<ItemRenderer>
        <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">
            <MudStack>
                <MudText>@context.Name</MudText>
                <MudStack Row="true">
                    <MudIconButton OnClick="@(() => (_prospectEditDialog = (context, _prospectEditDialog.ProspectEdit, default)).ProspectEdit.IsVisible = true)" Icon="@Icons.Material.Filled.Edit"/>
                    <MudSpacer/>
					<MudIconButton OnClick="@(e => OnProspectDelete(context))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                </MudStack>
            </MudStack>
        </MudPaper>
	</ItemRenderer>
</MudDropContainer>

<MudDialog @ref="_prospectEditDialog.ProspectEdit" IsVisibleChanged="ProspectEditVisibleChanged">
    <TitleContent>
        <MudText>Edit Prospect</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="_prospectEditDialog.ValidEdit">
            <MudStack>
                <MudTextField @bind-Value="@_prospectEditDialog.Prospect.Name"
                              Label="Prospect Name"
                              Placeholder="Your prospect's name"
                              Validation="@(new Func<string, string?>(ValidateProspectName))"
                              Required="true"
                              RequiredError="Prospect  username is required."
                              Immediate="true"
                              DebounceInterval="1.0"/>
            </MudStack>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
	private readonly List<Prospect> _prospects = [];

	private MudDropContainer<Prospect> _dropContainer;
	private bool _addSectionOpen;
	private (Prospect Prospect, MudDialog ProspectEdit, bool ValidEdit) _prospectEditDialog;

	[Parameter]
	public Pipeline<TPipeline> Pipeline { get; set; }

    private async Task OnProspectDelete(Prospect deleted)
    {
        _prospects.Remove(deleted);

        await SaveAsync();

		_dropContainer.Refresh();
    }

	private async Task ProspectEditVisibleChanged(bool isVisible)
	{
		if (!isVisible && _prospectEditDialog.ValidEdit)
        {
            await SaveAsync();
        }

		_dropContainer.Refresh();
	}

	private string? ValidateProspectName(string prospectName)
	{
		return !string.IsNullOrWhiteSpace(prospectName) ? null : "Prospect name must have a value.";
	}

	protected override async Task OnInitializedAsync()
	{
		_sections = Enum.GetValues<TPipeline>()
			.Where(step => ((int)(object)step) != 0)
			.Select(step => new KanBanSection(
				this.Pipeline.DisplayName(step),
				step,
				false,
				"New Prospect",
				step.Equals(this.Pipeline.FirstStep))).ToArray();

        // load prospects
        var userData = await Repo.GetUserDataAsync();
        if (userData?.Prospects.ContainsKey(this.Pipeline.Strategy) is true)
        {
            _prospects.AddRange(userData.Prospects[this.Pipeline.Strategy]);
        }
        else
        {
            _prospects.AddRange(
            [
                new() { Name = "W2 & No Biz", Order = 0, Status = _sections.First().Id },
			    new() { Name = "Has Vehicle", Order = 1, Status = _sections.First().Id },
			    new() { Name = "Has Cell", Order = 2, Status = _sections.First().Id },
			    new() { Name = "Takes Vacations", Order = 3, Status = _sections.First().Id },
			    new() { Name = "Has Kids 7-17", Order = 4, Status = _sections.First().Id },
			    new() { Name = "Money Motivated", Order = 5, Status = _sections.First().Id },
			    new() { Name = "Positive & Wants Better", Order = 6, Status = _sections.First().Id },
			    new() { Name = "Would Kill the Biz", Order = 7, Status = _sections.First().Id },
			    new() { Name = "Mad if you DIDN'T Share", Order = 8, Status = _sections.First().Id },
			    new() { Name = "Friends", Order = 9, Status = _sections.First().Id },
			    new() { Name = "Co-Workers", Order = 10, Status = _sections.First().Id },
			    new() { Name = "Family Members", Order = 11, Status = _sections.First().Id },
			    new() { Name = "Friends of Sig Other", Order = 12, Status = _sections.First().Id },
			    new() { Name = "Referrals", Order = 13, Status = _sections.First().Id },
            ]);
        }

		_dropContainer.Refresh();
		_dropContainer.Refresh();
	}

    private async Task SaveAsync()
    {
        var userData = await Repo.GetUserDataAsync() ?? new();

        if (!userData.Prospects.ContainsKey(this.Pipeline.Strategy))
        {
			userData.Prospects.Add(this.Pipeline.Strategy, []);
        }

        userData.Prospects[this.Pipeline.Strategy].Clear();
        userData.Prospects[this.Pipeline.Strategy].AddRange(_prospects);

        await Repo.SaveUserDataAsync(userData);
    }

	private async Task OnProspectStatusChanged(MudItemDropInfo<Prospect> dropItem)
	{
		dropItem.Item.Status = dropItem.DropzoneIdentifier;

		var zoneOffset = dropItem.DropzoneIdentifier == this.Pipeline.FirstStep.ToString()
			? 0 : _prospects.Count(t => (int)(object)Enum.Parse<TPipeline>(t.Status) < (int)(object)Enum.Parse<TPipeline>(dropItem.DropzoneIdentifier));

		_prospects.UpdateOrder(dropItem, item => item.Order, zoneOffset);

        var orderedProspects = _prospects.OrderBy(t => t.Order).ToList();
		_prospects.Clear();
		_prospects.AddRange(orderedProspects);

        await SaveAsync();

		this.StateHasChanged();
		_dropContainer.Refresh();
	}

	private KanBanSection[] _sections = [];

	public class KanBanSection
	{
		public string Id { get; init; }
		public string DisplayName { get; init; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }
		public bool AllowNewTasks { get; init; }

		public KanBanSection(string displayName, TPipeline step, bool newTaskOpen, string newTaskName, bool allowNewTasks)
		{
			DisplayName = displayName;
			Id = step.ToString();
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
			AllowNewTasks = allowNewTasks;
		}
	}

	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
		public string Name { get; set; }
	}

	private void OnValidSectionSubmit(EditContext context)
	{
		_sections = _sections.Union([new KanBanSection(newSectionModel.Name, default, false, string.Empty, false)]).ToArray();
		newSectionModel.Name = string.Empty;
		_addSectionOpen = false;
	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}

	private async Task AddProspect(KanBanSection section)
	{
		_prospects.Insert(0, new() { Name = section.NewTaskName, Status = section.Id, Order = 0 });
		await SaveAsync();

        section.NewTaskOpen = false;

        _dropContainer.Refresh();
	}

	private void DeleteSection(KanBanSection section)
	{
		if (_sections.Count() == 1)
		{
			_prospects.Clear();
			_sections = [];
		}
		else
		{
			int newIndex = _sections.ToList().IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections = _sections.Except([section]).ToArray();

			var tasks = _prospects.Where(x => x.Status == section.Id);
			foreach (var item in tasks)
			{
				item.Status = _sections[newIndex].Id;
			}
		}
	}
}
