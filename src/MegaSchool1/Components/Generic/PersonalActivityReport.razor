@typeparam TPipeline where TPipeline : struct, Enum
@using System.ComponentModel.DataAnnotations
@using MegaSchool1.Model
@using MegaSchool1.ViewModel
@using MudBlazor.Utilities
@inherits Components.ComponentBase

<MudDropContainer T="KanbanTaskItem" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
					<MudStack Row="true">
						<MudSpacer/>
						<MudText Typo="Typo.subtitle1" Align="Align.Center"><b>@((MarkupString)item.DisplayName.Replace(Environment.NewLine, "<br/>"))</b></MudText>
						<MudSpacer />
					</MudStack>
					@if(false)
					{
						<MudSpacer />
						<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
							<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
							<MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename Section</MudButton>
						</MudMenu>
					}
				</MudToolBar>
				@if (item.AllowNewTasks)
				{
					@if (item.NewTaskOpen)
					{
						<MudPaper Elevation="25" Class="pa-2 rounded-lg">
							<MudTextField @bind-Value="item.NewTaskName" Placeholder="Prospect" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
							<MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Prospect</MudButton>
						</MudPaper>
					}
					else
					{
						<MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Prospect</MudButton>
					}
				}
				<MudDropZone T="KanbanTaskItem" Identifier="@item.Id" AllowReorder="true" Class="mud-height-full" />
			</MudPaper>
		}
		@if(false)
		{
			<MudPaper Class="pa-4" Elevation="0" Width="224px">
				@if (_addSectionOpen)
				{
					<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
						<EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
							<DataAnnotationsValidator />
							<MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
							<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
						</EditForm>
					</MudPaper>
				}
				else
				{
					<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
				}
			</MudPaper>
		}
	</ChildContent>
	<ItemRenderer>
		<MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Name (@context.Order)</MudPaper>
	</ItemRenderer>
</MudDropContainer>

@code {
	private MudDropContainer<KanbanTaskItem> _dropContainer;
	private bool _addSectionOpen;

	[Parameter]
	public Pipeline<TPipeline> Pipeline { get; set; }

	protected override void OnInitialized()
	{
		_sections = Enum.GetValues<TPipeline>()
			.Where(step => ((int)(object)step) != 0)
			.Select(step => new KanBanSection(
				this.Pipeline.DisplayName(step),
				step,
				false,
				step.ToString(),
				step.Equals(this.Pipeline.FirstStep))).ToArray();

		_tasks = [
			new KanbanTaskItem("W2 & No Biz", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Has Vehicle", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Has Cell", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Takes Vacations", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Has Kids 7-17", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Money Motivated", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Positive & Wants Better", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Would Kill the Biz", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Mad if you DIDN'T Share", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Friends", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Co-Workers", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Family Members", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Friends of Sig Other", this.Pipeline.FirstStep.ToString()),
			new KanbanTaskItem("Referrals", this.Pipeline.FirstStep.ToString()),
		];

		for(var i = 0; i < _tasks.Count; i++)
		{
			_tasks[i].Order = i;
		}
	}

	private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> dropItem)
	{
		dropItem.Item.Status = dropItem.DropzoneIdentifier;

		var zoneOffset = dropItem.DropzoneIdentifier == this.Pipeline.FirstStep.ToString()
			? 0 : _tasks.Count(t => (int)(object)Enum.Parse<TPipeline>(t.Status) < (int)(object)Enum.Parse<TPipeline>(dropItem.DropzoneIdentifier));

		_tasks.UpdateOrder(dropItem, item => item.Order, zoneOffset);
		_tasks = _tasks.OrderBy(t => t.Order).ToList();

		this.StateHasChanged();
		_dropContainer.Refresh();
	}

	private KanBanSection[] _sections = [];

	public class KanBanSection
	{
		public string Id { get; init; }
		public string DisplayName { get; init; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }
		public bool AllowNewTasks { get; init; }

		public KanBanSection(string displayName, TPipeline step, bool newTaskOpen, string newTaskName, bool allowNewTasks)
		{
			DisplayName = displayName;
			Id = step.ToString();
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
			AllowNewTasks = allowNewTasks;
		}
	}

	private List<KanbanTaskItem> _tasks = [];

	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
		public string Name { get; set; }
	}

	private void OnValidSectionSubmit(EditContext context)
	{
		_sections = _sections.Union([new KanBanSection(newSectionModel.Name, default, false, string.Empty, false)]).ToArray();
		newSectionModel.Name = string.Empty;
		_addSectionOpen = false;
	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}

	private void AddTask(KanBanSection section)
	{
		_tasks.Insert(0, new KanbanTaskItem(section.NewTaskName, section.Id));
		section.NewTaskName = string.Empty;
		section.NewTaskOpen = false;
		_dropContainer.Refresh();
	}

	private void DeleteSection(KanBanSection section)
	{
		if (_sections.Count() == 1)
		{
			_tasks.Clear();
			_sections = [];
		}
		else
		{
			int newIndex = _sections.ToList().IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections = _sections.Except([section]).ToArray();

			var tasks = _tasks.Where(x => x.Status == section.Id);
			foreach (var item in tasks)
			{
				item.Status = _sections[newIndex].Id;
			}
		}
	}
}
