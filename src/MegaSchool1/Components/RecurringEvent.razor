@using MegaSchool1.Model
@inherits Components.ComponentBase
@inject NavigationManager NavigationManager

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText @onclick="@(() => _ = this.CopyTextToClipboardAsync($"{NavigationManager.BaseUri}en/promo/{AppState?.User?.MemberId}/{Id}"))" Typo="Typo.h6">@((MarkupString)Header.Replace(Environment.NewLine, "<br/>"))</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <Centered><MudImage Src="@ImageUri" Fluid="true" /></Centered>
    <MudCardContent>
        <MudStack>
            <MudText Typo="Typo.body2" Align="Align.Center">@((Recurrence.Day is null ? "Daily" : $"{Recurrence.Day}s")) @@ @GetNextEvent(this.Recurrence.Day is null ? DateTime.Now.DayOfWeek : this.Recurrence.Day.Value, this.Recurrence.Time, this.Recurrence.TimeZone).ToOffset(TimeZoneInfo.Local.BaseUtcOffset).ToString(" h:mm tt") @TimeZoneInfo.Local.StandardName</MudText>
        </MudStack>
    </MudCardContent>
    <MudCardActions>
        <MudStack Style="width:100%;">
            @if (!string.IsNullOrWhiteSpace(this.Url))
            {
                <MudStack Row="true" Style="width:100%;">
                    <MudSpacer/>
                    <ExternalLink Href="@Url" Text="Join Now!"/>
                    <MudSpacer/>
                </MudStack>
            }
            @if (!string.IsNullOrWhiteSpace(this.Password))
            {
                <MudText Align="Align.Center">Password: @Password</MudText>
            }
            <br/>
            @if (Constants.CorporateLivestreamLink.ContainsValue(this.Url))
            {
                <MudStack Row="true">
                    <MudSpacer/>
                    <MudChipSet SelectedValues="@([LivestreamPlatform?.Platform])" SelectedChipChanged="OnSelectedLivestreamPlatformChanged" Filter="true" Mandatory="true">
                        <MudChip Size="Size.Small" Value="Model.LivestreamPlatform.Facebook" Text="@nameof(Model.LivestreamPlatform.Facebook)" Color="Color.Primary" Variant="Variant.Outlined" Default="@(LivestreamPlatform?.Platform == Model.LivestreamPlatform.Facebook)" OnClose="() => { }" CloseIcon="@Icons.Material.Filled.ClosedCaption">Facebook</MudChip>
                        <MudChip Size="Size.Small" Value="Model.LivestreamPlatform.YouTube" Text="@nameof(Model.LivestreamPlatform.YouTube)" Color="Color.Primary" Variant="Variant.Outlined" Default="@(LivestreamPlatform?.Platform == Model.LivestreamPlatform.YouTube)">YouTube</MudChip>
                        <MudChip Size="Size.Small" Value="Model.LivestreamPlatform.LinkedIn" Text="@nameof(Model.LivestreamPlatform.LinkedIn)" Color="Color.Primary" Variant="Variant.Outlined" Default="@(LivestreamPlatform?.Platform == Model.LivestreamPlatform.LinkedIn)" OnClose="() => { }" CloseIcon="@Icons.Material.Filled.ClosedCaption">LinkedIn</MudChip>
                    </MudChipSet>
                    <MudSpacer/>
                </MudStack>
            }
            <MudStack Row="true" Style="width:100%;">
                <MudSpacer/>
                <ShareableContent Tooltip="Invitation copied!"
                                  TextToCopy="@Text"
                                  ImageUrl="@ImageUri"/>
                <MudSpacer/>
            </MudStack>
            @if(!string.IsNullOrWhiteSpace(this.Archive))
            {
                <MudDivider Class="my-2" />
                <MudStack Row="true">
                    <MudSpacer/>
                    <ExternalLink Href="@Archive" Text="Watch Replays" />
                    <CopyContent TextToCopy="@Archive" />
                    <MudSpacer/>
                </MudStack>
            }
        </MudStack>
    </MudCardActions>
</MudCard>

<MudDialog @bind-IsVisible="_showImageDialog.ShowImageDialog" Options="@(new DialogOptions() { FullWidth = true, NoHeader = true })">
    <DialogContent>
        <MudImage Src="@(_showImageDialog.ImageUri)" Fluid="true" Class="rounded-lg" />
    </DialogContent>
</MudDialog>

@code {
    private (bool ShowImageDialog, string ImageUri) _showImageDialog;

    [Parameter]
    public string Header { get; set; } = "72-Hour Money Challenge!";

    [Parameter]
    public string ImageUri { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public (DayOfWeek? Day, TimeOnly Time, TimeZoneInfo TimeZone) Recurrence { get; set; }

    [Parameter]
    public string? Url { get; set; }

    [Parameter]
    public string? Password { get; set; }

    [Parameter]
    public string? Archive { get; set; }

    [Parameter]
    public (string EventId, LivestreamPlatform Platform)? LivestreamPlatform { get; set; }

    [Parameter]
    public EventCallback<(string EventId, LivestreamPlatform Platform)?> LivestreamPlatformSelectionChanged { get; set; }

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private void OnSelectedLivestreamPlatformChanged(MudChip selectedLivestreamPlatform)
    {
        var newStreamingPlatform = (this.LivestreamPlatform?.EventId!, Enum.Parse<LivestreamPlatform>(selectedLivestreamPlatform.Text));
        if (newStreamingPlatform.Item2 != this.LivestreamPlatform?.Platform)
        {
            this.LivestreamPlatformSelectionChanged.InvokeAsync(newStreamingPlatform);
        }
    }
}
