@using MegaSchool1.Model
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter]
    public AppState? AppState { get; set; }

    protected bool ComponentInitialized { get; private set; }
    private bool IsCarPurchasePage => NavigationManager.Uri.Contains("/carpurchase");

    protected override void OnInitialized()
    {
        this.ComponentInitialized = true;
        this.StateHasChanged();
    }

    protected bool NavigateToProspectPageIfApplicable()
    {
        if (!IsCarPurchasePage && ProspectMode)
        {
            NavigationManager.NavigateTo("/carpurchase");
            
            return true;
        }

        return false;
    }

    protected bool ProspectMode => AppState?.UserName == null;

    protected static string FormatTimeSpan(TimeSpan duration)
        => $"({(duration.Hours > 0 ? $"{duration.Hours}hr " : string.Empty)}{(duration.Minutes > 0 ? $"{duration.Minutes}min" : string.Empty)}{(duration.Seconds > 0 ? $" {duration.Seconds}sec" : string.Empty)})";

    protected static DateTimeOffset GetNextEvent(DayOfWeek day, TimeOnly time, TimeZoneInfo timeZone)
    {
        var currentTimeInEventTimeZone = DateTimeOffset.Now.ToOffset(timeZone.BaseUtcOffset);

        var nextEventTime = currentTimeInEventTimeZone.AddHours(time.Hour - currentTimeInEventTimeZone.Hour);
        nextEventTime = nextEventTime.AddMinutes(time.Minute - nextEventTime.Minute);

        // remove seconds
        nextEventTime = nextEventTime.AddSeconds(-1 * nextEventTime.Second);

        var nextEvent = nextEventTime;
        while (nextEvent.DayOfWeek != day || nextEvent < currentTimeInEventTimeZone)
        {
            nextEvent = nextEvent.AddDays(1);
        }

        return nextEvent;
    }

    protected async Task CopyTextToClipboardAsync(string text)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", text);
    }

    protected async Task<bool> WebShareAllowedAsync()
    {
        return await JSRuntime.InvokeAsync<bool>("webshareAllowed");
    }

    protected async Task ShareMessageAsync(string message, string imageUrl)
    {
        const string DefaultWebShareTitle = "MWR";

        await JSRuntime.InvokeVoidAsync("webshare", DefaultWebShareTitle, message, imageUrl);
    }

    protected Task ShareMessageAsync(string message, Image image) => ShareMessageAsync(message, Constants.GetImageUrl(image));
}
