@using MegaSchool1.Model
@using MegaSchool1.Model.Dto
@using MegaSchool1.ViewModel
@using OneOf
@using OneOf.Types
@inject NavigationManager NavigationManager
@inject UISettings UI
@inject Mappers Mappers
@inherits Foundation.UI.Components.ComponentBase

@code {
    [CascadingParameter]
    public AppState? AppState { get; set; }

    protected MudTheme Theme { get; } = new();
    private bool IsCarPurchasePage => NavigationManager.Uri.Contains("/carpurchase");

    protected bool NavigateToProspectPageIfApplicable()
    {
        if (!IsCarPurchasePage && ProspectMode)
        {
            NavigationManager.NavigateTo("/");

            return true;
        }

        return false;
    }

    protected bool ProspectMode => AppState?.User == null;

    public static async Task ShareOrCopyTextAsync(string text, Image image, IJSRuntime js)
    {
        // copy text to clipboard
        await CopyTextToClipBoardAsync(text, js);

        // open share dialog
        var webShareAllowed = await WebShareAllowedAsync(js);
        if (webShareAllowed)
        {
            await ShareMessageAsync(text, Constants.GetImageUrl(image), js);
        }
    }

    protected (OneOf<ShareableViewModel, None> English, OneOf<ShareableViewModel, None> Spanish) GetShareable(OneOf<Content, ShareableDto> content)
    {
        var spanishDto = content.Match(contentId => UI.SpanishLocale[contentId], dto => dto);
        var englishDto = content.Match(contentId => UI.EnglishLocale[contentId], dto => dto);

        return (englishDto != null ? Mappers.ShareableDtoToViewModel(englishDto)  : new None(), spanishDto != null ? Mappers.ShareableDtoToViewModel(spanishDto) : new None());
    }

    protected OneOf<Video, None> GetVideo(OneOf<Content, ShareableDto> content, Language language = Language.English)
    {
        var shareable = GetShareable(content);

        return GetVideo(language == Language.Spanish ? shareable.Spanish : shareable.English);
    }

    private static OneOf<Video, None> GetVideo(OneOf<ShareableViewModel, None> shareable)
    {
        return shareable
            .MapT0(viewModel => viewModel.Video)
            .Match(videoViewModel => videoViewModel.MapT0(v => v.Video), none => new None());
    }
}
