@using MegaSchool1.Model
@using System.Web
@using MegaSchool1.ViewModel
@using OneOf
@using OneOf.Types
@inherits Components.ComponentBase
@inject Model.Constants Constants
@inject UISettings UI
@inject NavigationManager NavigationManager

<MudCard Outlined="true">
    <MudCardContent>
        <MudStack Spacing="3">
            @if (Video.IsT0)
            {
                <EmbeddedVideo Video="@Video.MapT0(video => video.Video)"/>
            }
            @if (this.Description != null)
            {
                @if (this.Url != null)
                {
                    <MudStack Row="true">
                        <MudSpacer/>
                        <MudText Align="Align.Center"><ExternalLink Href="@($"https://theotherstuff.github.io/iframe?url={HttpUtility.UrlEncode(Url)}")">@Description</ExternalLink></MudText>
                        <MudSpacer/>
                    </MudStack>
                }
                else
                {
                    <MudText Align="Align.Center">@((MarkupString)this.Description.Replace(Environment.NewLine, "<br/>"))</MudText>
                }

                @if (this.Duration != null)
                {
                    <MudText Typo="Typo.body2" Align="Align.Center">@FormatTimeSpan(Duration.Value)</MudText>
                }
            }
            else
            {
                <div>
                    @this.ChildContent
                </div>
            }
        </MudStack>
    </MudCardContent>
    <MudCardActions>
        <ShareableContent TextToCopy="@TextToCopy"
                          Tooltip="@Tooltip"
                          QRCode="@(QRCode.Match(qrCode => new (string Content, string Url)?(qrCode), none => null))"
                          ImageUrl="@ImageUrl" />
    </MudCardActions>
</MudCard>
@code {
    [Parameter]
    public OneOf<Content, None> Content { get; set; } = new None();

    [Parameter]
    public OneOf<VideoViewModel, None> Video { get; set; } = new None();

    [Parameter]
    public string? Description { get; set; }

    [Parameter]
    public string TextToCopy { get; set; }

    [Parameter]
    public string Tooltip { get; set; }

    [Parameter]
    public string ImageUrl { get; set; } = Constants.GetImageUrl(Image.MoneyChallengeLogo);

    [Parameter]
    public string? Url { get; set; }

    [Parameter]
    public OneOf<(string Content, string FileName), None> QRCode { get; set; } = new None();

    [Parameter]
    public TimeSpan? Duration { get; set; }

    [Parameter]
    public OneOf<(string MemberId, string ReferralCode), None> CapturePage { get; set; } = new None();

    protected override void OnParametersSet()
    {
        if (this.Content.TryPickT0(out var content, out _))
        {
            var mapper = new Mappers();
            var englishDto = UI.EnglishLocale[content];
            var english = englishDto != null ? mapper.ShareableDtoToViewModel(englishDto) : new();

            this.Description = english.AppDescription;
            this.Video = english.Video;
            this.TextToCopy = CapturePage.Match(info => ShareableViewModel.CapturePageShareable(english, NavigationManager, Language.English, info.MemberId, info.ReferralCode), none => ShareableViewModel.VideoShareable(english));
            this.Tooltip = "Copied!";
            this.ImageUrl = Constants.GetImageUrl(english.ShareableImage);
        }

        this.Duration = this.Video.Match(
            video => video.Duration,
            none => this.Duration);

        this.Url = this.Video.Match(
            video => CapturePage.Match(info => Constants.GetCapturePage(content, Language.English, NavigationManager, info.MemberId, info.ReferralCode), none => video.Video.MinimalistUrl()),
            none => this.Url);

        this.QRCode = CapturePage.MapT0(info => (this.Url!, $"{Content}-{info.MemberId}-{info.ReferralCode}.png"));
    }
}
