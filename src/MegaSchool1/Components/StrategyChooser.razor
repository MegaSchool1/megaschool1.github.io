@using MegaSchool1.Model
@inherits Components.ComponentBase

<Centered>
    <MudSelect T="Strategy" @bind-Value="@_selectedStrategy" Label="@Label" Variant="Variant.Outlined" FullWidth="true" Style="width:100%;">
    @foreach (var strategy in Strategies)
    {
        <MudSelectItem Value="@strategy">@((MarkupString)Pad(StrategyDisplayName[strategy]))</MudSelectItem>
    }
    </MudSelect>
</Centered>

<MudTabs @ref="_tabs" ActivePanelIndex="@(_tabs?.Panels.ToList().FindIndex(p => _selectedStrategy.Equals(p.Tag)) ?? 0)" TabHeaderClass="d-none" Elevation="0" Rounded="true" Centered="true" Color="@Color.Primary" ApplyEffectsToContainer="true" PanelClass="pa-6">
    @ChildContent
</MudTabs>

@code {
    public static readonly Strategy[] AllStrategies = Enum.GetValues<Strategy>();

    private static readonly Dictionary<Strategy, string> StrategyDisplayName = new()
    {
        { Strategy.MegaSchool, "Mega School" },
        { Strategy.Corporate, "Corporate" },
        { Strategy.ExtraDigitMovement, "Extra Digit Movement" },
        { Strategy.FaithAndFinance, "Faith & Finance" },
        { Strategy.RealEstate, "Real Estate" },
        { Strategy.Latino, "Latino" },
    };

    private MudTabs? _tabs;
    private Strategy _selectedStrategy;

    [Parameter]
    public Strategy[] Strategies { get; set; } = AllStrategies;

    [Parameter]
    public Strategy DefaultStrategy { get; set; } = Strategy.MegaSchool;

    [Parameter]
    public string Label { get; set; } = "Strategy";

    public Strategy GetSelectedStrategy() => _selectedStrategy;

    private static string Pad(string strategy)
    {
        const string LongestStrategyName = "Extra Digit Movement";

        var padding = string.Empty.PadRight((2 * LongestStrategyName.Length) - strategy.Length, ' ').Replace(" ", "&nbsp;");

        return $"{strategy}{padding}";
    }

    protected override void OnInitialized()
    {
        _selectedStrategy = DefaultStrategy;
    }
}
