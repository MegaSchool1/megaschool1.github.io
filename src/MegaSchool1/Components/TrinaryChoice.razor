@using OneOf
@using OneOf.Types
@inherits Components.ComponentBase

<MudText Align="Align.Center">@Description</MudText>
<MudStack Row="true">
    <MudSpacer />
    <MudRadioGroup @bind-Value="SelectedChoice">
        <MudRadio T="OneOf<BinaryChoice.Choice, None>" Value="BinaryChoice.Choice.First" Color="Color.Primary" Size="Size.Small">@FirstChoiceLabel</MudRadio>
        <MudRadio T="OneOf<BinaryChoice.Choice, None>" Value="BinaryChoice.Choice.Second" Color="Color.Secondary" Size="Size.Medium">@SecondChoiceLabel</MudRadio>
    </MudRadioGroup>
    <MudSpacer />
</MudStack>
<br />
<MudDivider />
<br />
@if(SelectedChoice.TryPickT0(out var choice, out _))
{
    if (choice == BinaryChoice.Choice.First)
    {
        @FirstChoiceContent
    }

    if (choice == BinaryChoice.Choice.Second)
    {
        @SecondChoiceContent
    }
}

@code {
    [Parameter]
    public string Description { get; set; } = "My Binary Choice";

    [Parameter]
    public string FirstChoiceLabel { get; set; } = "My First Choice";

    [Parameter]
    public string SecondChoiceLabel { get; set; } = "My Second Choice";

    [Parameter]
    public RenderFragment? FirstChoiceContent { get; set; }

    [Parameter]
    public RenderFragment? SecondChoiceContent { get; set; }

    private OneOf<BinaryChoice.Choice, None> _selectedChoice = new None();
    [Parameter]
    public OneOf<BinaryChoice.Choice, None> SelectedChoice
    {
        get => _selectedChoice;
        set
        {
            if (!_selectedChoice.Value.Equals(value.Value))
            {
                _selectedChoice = value;
                _ = SelectedChoiceChanged.InvokeAsync(_selectedChoice);
            }
        }
    }

    [Parameter]
    public EventCallback<OneOf<BinaryChoice.Choice, None>> SelectedChoiceChanged { get; set; }
}
