@page "/"
@inherits ShareableCapturePage
@using MegaSchool1.Components
@using MegaSchool1.Model
@using MegaSchool1.Model.Dto
@using MegaSchool1.Pages.CapturePage
@using Serilog
@inject UISettings UI
@inject Repository.Repository Repo
@inject ClientSettings DefaultClientSettings

<MudStack Spacing="3">
    <MudText Align="Align.Center" Typo="Typo.h6">Wealth Syndicate Classes<br />aka "Learning Paths"</MudText>
    <MudText Align="Align.Center">First class is FREE! <br /> Subsequent classes are $150 per course.*</MudText>
    <br />
    <Centered><MudButton OnClick="OnAddContent" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" n Color="Color.Primary">Add</MudButton></Centered>
    @foreach (var classInfo in _classes)
    {
        <MudCard Outlined="true">
            <MudCardHeader>@classInfo.ClassName</MudCardHeader>
            <MudCardContent>
                <MudStack Spacing="3">
                    <EmbeddedVideo Video="@((classInfo.ContentId == Content.Custom ? GetVideo(classInfo) : GetVideo(classInfo.ContentId)))" />
                    <MudText Align="Align.Center">@classInfo.ClassDescription</MudText>
                    <MudStack Row="true">
                        <MudIconButton OnClick="async () => await OnMoveUp(classInfo)" Icon="@Icons.Material.Filled.ArrowCircleUp" Color="Color.Primary" />
                        <MudIconButton OnClick="async () => await OnMoveDown(classInfo)" Icon="@Icons.Material.Filled.ArrowCircleDown" Color="Color.Primary" />
                        <MudSpacer />
                        @if (classInfo.ContentId == Content.Custom)
                        {
                            <MudIconButton OnClick="async () => await OnDelete(classInfo)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                        }
                    </MudStack>
                </MudStack>
            </MudCardContent>
        </MudCard>
    }
</MudStack>
<MudStack Spacing="3">
    <MudCard Outlined="true">
        <MudCardHeader>Trust Fund&nbsp;<i>MY</i>&nbsp; Baby!</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@(GetVideo(Content.TrustMyAssets))" />
                <MudText Align="Align.Center">How make&nbsp;<i>YOUR</i>&nbsp; baby a trust fund baby. (Hint: you don't need to be rich!)</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>Non-Profit Fundraiser</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@(GetVideo(Content.GivBuxFundraiser))" />
                <MudText Align="Align.Center">Learn how to partner with Amazon.com and local businesses to receive donations whenever your donors shop!</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>Real Estate Professionals</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@(GetVideo(Content.RealEstatePros))" />
                <MudText Align="Align.Center">Create cash flow from: <br/><br /> &#x2022; Unqualified Renters <br /> &#x2022; Unqualified Buyers <br /> &#x2022; Past Clients <br /> &#x2022; Your Agents</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>Finance Professionals <br/> (Insurance Agents, Accountants, Tax Preparers)</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@(GetVideo(Content.Membership))" />
                <MudText Align="Align.Center">Expand your financial service offering at no addition cost.</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>Home Buyers</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@(GetVideo(Content.KeysToHomeOwnership))" />
                <MudText Align="Align.Center">Rent to own, or simply automate the headaches of home buying.</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>Debt Elimination <br/> (mortgage, school loans, credit card, etc)</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@(GetVideo(Content.PayoffMortgage))" />
                <MudText Align="Align.Center">Accelerate your debt elimination without spending an extra penny!</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>Precious Metals</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@(GetVideo(Content.PreciousMetals))" />
                <MudText Align="Align.Center">Learn how to become a ratio investor and FULLY unlock the wealth of precious metals.</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>Health Care</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@(GetVideo(Content.HealthShare))" />
                <MudText Align="Align.Center">Learn how Health Sharing (not insurance!) makes health care affordable and ethical.</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>"Double Dip" Your Money</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@((Video)new YouTube("c2_hG7NgNWU"))" />
                <MudText Align="Align.Center">Learn how to "double dip" with your money, legally and ethically.</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>Credit Restoration</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@(GetVideo(Content.CreditRestoration))" />
                <MudText Align="Align.Center">Learn how to restore your credit with the help of a non-profit with 30+ years of credit restoration experience.</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>Student Loan Relief</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@(GetVideo(Content.StudentLoanDebtRelief))" />
                <MudText Align="Align.Center">Learn how to reduce and possibly ELIMINATE your student loans!</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>Prison Ministry</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@((Video)new YouTube("hrOLCGT11ig"))" />
                <MudText Align="Align.Center">Learn how to help the incarcerated provide for their families, legally and ethically.</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>School Fundraisers</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@((Video)new YouTube("-KmR2kfru0c"))" />
                <MudText Align="Align.Center">Learn how to make money by fundraising for schools.</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudCard Outlined="true">
        <MudCardHeader>How to Build a S.I.M.P.L.E Home Based Business</MudCardHeader>
        <MudCardContent>
            <MudStack Spacing="3">
                <EmbeddedVideo Video="@(GetVideo(Content.EDMPique))" />
                <MudText Align="Align.Center">Learn how to become wealthy with a S.I.M.P.L.E home based business.</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    @* Ensure 'scroll to top' button on bottom right of screen does not cover content. *@
    <div style="height:75px;"></div>
</MudStack>
@code {
    private ShareableDto[] _classes = [];

    protected override async Task OnInitializedAsync()
    {
        await ReloadClassesAsync();
    }

    private async Task OnMoveUp(ShareableDto shareable)
    {
        const int NotFound = -1;

        var clientSettings = await this.GetClientSettingsAsync();
        var content = clientSettings.UI.Localizations.First(l => l == clientSettings.UI.EnglishLocale);

        var shareables = content.Shareables.ToList();
        var currentIndex = shareables.FindIndex(s => s.ClassName == shareable.ClassName);
        if (currentIndex != NotFound)
        {
            var targetIndex = currentIndex - 1;
            if (targetIndex >= 0)
            {
                var shareableToMove = shareables.ElementAt(currentIndex);
                shareables.Remove(shareableToMove);

                shareables.Insert(targetIndex, shareableToMove);

                content.Shareables = shareables.ToArray();
                await this.SaveClientSettingsAsync(clientSettings);
                await ReloadClassesAsync();
            }
        }
    }

    private async Task OnMoveDown(ShareableDto shareable)
    {
        const int NotFound = -1;

        var clientSettings = await this.GetClientSettingsAsync();
        var content = clientSettings.UI.Localizations.First(l => l == clientSettings.UI.EnglishLocale);

        var shareables = content.Shareables.ToList();
        var currentIndex = shareables.FindIndex(s => s.ClassName == shareable.ClassName);
        if (currentIndex != NotFound)
        {
            var targetIndex = currentIndex + 1;
            if (targetIndex >= 0)
            {
                var shareableToMove = shareables.ElementAt(currentIndex);
                shareables.Remove(shareableToMove);

                shareables.Insert(targetIndex, shareableToMove);

                content.Shareables = shareables.ToArray();
                await this.SaveClientSettingsAsync(clientSettings);
                await ReloadClassesAsync();
            }
        }
    }

    private async Task OnDelete(ShareableDto shareable)
    {
        if(shareable.ContentId == Content.Custom)
        {
            var clientSettings = await this.GetClientSettingsAsync();
            var content = clientSettings.UI.Localizations.First(l => l == clientSettings.UI.EnglishLocale);

            content.Shareables = content.Shareables.Where(s => s.ClassName != shareable.ClassName).ToArray();

            await this.SaveClientSettingsAsync(clientSettings);

            await ReloadClassesAsync();
        }
    }

    private async Task<ClientSettings> GetClientSettingsAsync()
    {
        return (await Repo.GetClientSettingsAsync())
        .Match(
            found => found,
            none => DefaultClientSettings,
            error => { Log.ForContext<Home>().Error(error.Value); return DefaultClientSettings; });
    }

    private async Task SaveClientSettingsAsync(ClientSettings settings)
    {
        await Repo.SaveClientSettingsAsync(settings);
    }

    private async Task ReloadClassesAsync()
    {
        var clientSettings = await this.GetClientSettingsAsync();

        var content = clientSettings.UI.Localizations.First(l => l == clientSettings.UI.EnglishLocale);

        _classes = content.Shareables.Where(s => s.ClassName != null).ToArray();
    }

    private async Task OnAddContent()
    {
        var time = DateTime.Now;

        var youTubeId = new Uri("https://www.youtube.com/watch?v=Lvdyi5DWNm4");
        string param1 = System.Web.HttpUtility.ParseQueryString(youTubeId.Query).Get("v");

        var newContent = new ShareableDto() { ContentId = Content.Custom, ClassName = $"Name - {time.TimeOfDay}", ClassDescription = $"Description - {time.TimeOfDay}", Id = param1, Platform = VideoPlatform.YouTube };

        var clientSettings = await this.GetClientSettingsAsync();

        var content = clientSettings.UI.Localizations.First(l => l == clientSettings.UI.EnglishLocale);
        content.Shareables = content.Shareables.Prepend(newContent).ToArray();

        await this.SaveClientSettingsAsync(clientSettings);

        await ReloadClassesAsync();
    }
}