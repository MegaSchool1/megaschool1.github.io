@page "/carpurchase"
@using MegaSchool1.Components

<MudText Align="Align.Center" Typo="Typo.h4">How a Teen Should Buy Their First Car<br/>($3,000 Car)</MudText>
<br/>
<br/>
<MudText Align="Align.Center" Typo="Typo.h6">Parents need $700 up front TOTAL and receive a GUARANTEED reimbursement of the $700 within 30 days</MudText>
<br/>
<br/>
<MudTimeline>
    @foreach (var step in _steps)
    {
        <MudTimelineItem Color="@GetColor(step)" Size="Size.Small">
            <ItemOpposite>
                <MudText Color="@GetColor(step)" Typo="Typo.h5">Step @(_steps.IndexOf(step) + 1)</MudText>
            </ItemOpposite>
            <ItemContent>
                <MudText Color="@GetColor(step)" Typo="Typo.h6" GutterBottom="true">@step.Title</MudText>
                <MudLink OnClick="@(() => _dialogInfo = (true, step))">Show Details</MudLink>
            </ItemContent>
        </MudTimelineItem>
    }
</MudTimeline>

<MudDialog @bind-Visible="_dialogInfo.ShowDialog" Options="@(new DialogOptions() { FullWidth = true, NoHeader = true })">
    <DialogContent>
        <MudText Color="@GetColor(_dialogInfo.Step)" Typo="Typo.h6" GutterBottom="true">@_dialogInfo.Step.Title</MudText>
        <MudStack>
            @foreach (var detail in _dialogInfo.Step.Details)
            {
                <MudStack Row="true">
                    <MudText>@((int.TryParse(detail.Substring(0, 1), out var numTabs) ? (MarkupString)Tabs(numTabs) : (MarkupString)"&#x2022;"))</MudText>
                    <MudText>@FormatDescription(int.TryParse(detail.Substring(0, 1), out _) ? detail.Substring(1): detail)</MudText>
                </MudStack>                
            }
        </MudStack>
    </DialogContent>
</MudDialog>

@code {
    private readonly MudTheme _theme = new();

    private readonly List<(string Title, string[] Details)> _steps = 
    [
        ("Hire Team of Financial Experts", [$"Dad opens <a href='/en/EDMGivBux/MS1/megaschool' target='_blank'><span style='color:{new MudTheme().PaletteDark.Primary};'><u>MWR Business Account</u></span></a> for $350", "1$200 1-time business activation fee", "1$150/mo membership fee", $"Mom likewise purchases an <a href='/en/EDMGivBux/MS1/megaschool' target='_blank'><span style='color:{new MudTheme().PaletteDark.Primary};'><u>MWR Business Account</u></span></a> for $350 on behalf of teen", "Teen owes Mom", "1$200 1-time business activation fee", "1$150/mo membership fee"]),
        ("Get GivBux", [$@"Dad sets up his <a href='/en/GivBux/MS1/megaschool' target='_blank'><span style='color:{new MudTheme().PaletteDark.Primary};'><u>GivBux account</u></span></a>", $"Mom sets up her <a href='/en/GivBux/MS1/megaschool' target='_blank'><span style='color:{new MudTheme().PaletteDark.Primary};'><u>GivBux account</u></span></a> using Dad's code", $"Teen sets up his/her <a href='/en/GivBux/MS1/megaschool' target='_blank'><span style='color:{new MudTheme().PaletteDark.Primary};'><u>GivBux account</u></span></a> using Dad's code"]),
        ("Family Gets $350+/mo Cash Back", ["0Month 1", "1Income - $900", "2$50 Membership Enrollment Bonus (Mom is Dad's referral)", "2$850+/mo cash back from 'Instant Pay Raise' and 'Lower My Bills'", "1Expenses - $900", "2$350 for Dad's MWR Account ([Step 1])", "2$350 for Mom's MWR Account ([Step 1])", "2$200 for monthly deposit into teen's bank ([Step 4])", "0Month 2 & Beyond", "2Income - $850+/mo", "3$850+/mo cash back from 'Instant Pay Raise' and 'Lower My Bills'", "2Expenses - $500/mo", "3$150/mo - Dad's MWR Membership Fee", "3$150/mo - Mom's MWR Membership Fee", "3$200/mo - Monthly deposit into teen's bank ([Step 4])", "2Net - $350/mo"]),
        ("Teen Creates Their Own Bank", ["Teen opens Diversified Cashflow Account (DCA)", "This DCA is funded $200/mo by parents (see [Step 3]) as a college fund investment"]),
        ("Parents Fund Teen's Bank", ["Parents fund their teen's DCA w/ $3,000 (transferred from existing college fund elsewhere)"]),
        ("Teen Issues Car Loan to THEMSELF", ["Teen borrows $3,000 from their DCA"]),
        ("Teen Buys Car CASH!", ["Teen buys their car CASH from the loan they gave themself in [Step 6]"]),
        ("Teen Plans Car Loan Repayment", ["Teen plans car loan repayment via \"Eliminate My Debt\""]),
        ("Teen Budgets Their Bank Interest", ["Teen updates their car loan repayment plan w/ higher monthly payments from their DCA's uninterrupted, compound interest"]),
        ("Teen Earns $600/mo PASSIVELY", ["Teen sells 12 MWR Memberships via the 72-Hour Money Challenge and receives $600/mo in residual commissions", "$200/mo (of the $600/mo) pays the car loan payment", "$200/mo (of the $600/mo) pays the car insurance", "$200/mo (of the $600/mo) pays for gas"]),
        ("Teen Builds Their Credit", ["Teen builds credit by paying their monthly car loan payments with a secured credit card", "Teen pays $200/mo to repay the loan in 15 months"]),
        ("Teen Pays Off Car", ["Teen pays off $3,000 car loan in 15 months ($200/mo from [Step 10])"]),
        ("Teen Reimburses Parents", ["Teen reimburses Mom for the MWR Business Account purchased on their behalf in [Step 1]", "Teen reimburses Mom $200/mo until she's fully reimbursed", "Remember, Mom's MWR Membership was free after [Step 10] (3 & Free)"]),
        ("Teen Regularly Deposits into Their Bank", ["Parents stop depositing $200/mo into teen's DCA", "Parents now have a total of $550/mo of extra income", "Teen starts depositing $200/mo into their DCA (freed up from completing car loan payment)" ]),
        ("Teen 'Double Dips' w/ Investments", ["Teen earns uninterrupted compound interest in their DCA", "Teen borrows against their DCA and uses the money to invest in assets" ]),
    ];

    private (bool ShowDialog, (string Title, string[] Details) Step) _dialogInfo = new(false, default);

    private string Tabs(int numTabs) => numTabs == 0 ? string.Empty : Enumerable.Range(1, numTabs).Select(_ => "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;").Aggregate((accumulated, next) => $"{accumulated}{next}") + "&#x2022;";

    private Color GetColor((string Title, string[] Details) step) => (_steps.IndexOf(step) % 4) switch
    {
        0 => Color.Info,
        1 => Color.Success,
        2 => Color.Primary,
        3 => Color.Warning,
    };

    private (Color Color, string Pallette) GetColor(int step) => (step % 4) switch
    {
        0 => (Color.Info, _theme.PaletteDark.Info.Value),
        1 => (Color.Success, _theme.PaletteDark.Success.Value),
        2 => (Color.Primary, _theme.PaletteDark.Primary.Value),
        3 => (Color.Warning, _theme.PaletteDark.Warning.Value),
    };

    private MarkupString FormatDescription(string description)
    {
        var formatted = description;

        for(var i = 0; i < _steps.Count; i++)
    {
            var targetPhrase = $"[Step {i+1}]";

            if(formatted.Contains(targetPhrase))
            {
                formatted = formatted.Replace(targetPhrase, $@"<span style=""color:{GetColor(i).Pallette};"">{targetPhrase.Replace("[", string.Empty).Replace("]", string.Empty)}</span>");
            }
        }

        return (MarkupString)formatted;
    }
}