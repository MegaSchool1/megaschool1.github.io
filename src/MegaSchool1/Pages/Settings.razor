@page "/settings"
@using MegaSchool1.Components
@using MegaSchool1.Model
@using System.Text.Json
@using FluentValidation
@using MegaSchool1.Dialog
@using MegaSchool1.Model.Repository
@using MegaSchool1.Repository.Model
@using System.Text
@using System.Text.RegularExpressions
@using MegaSchool1.ViewModel
@inherits Components.ComponentBase
@inject Repository.Repository Repo
@inject IDialogService Dialog
@inject IJSRuntime JS

<Loader Loaded="_loaded">
    <MudStack Spacing="6">
        <MudForm @bind-IsValid="_dataValid">
            <MudStack Spacing="3">
                <MudCard Outlined="true">
                    <MudCardContent>
                        <MudTextField Value="_viewModel.GivBuxCode" Label="My GivBux Code" Variant="Variant.Outlined" Immediate="true" Placeholder="GivBux Code" Validation="@(new Func<string,  Task<string?>>(ValidateGivBuxCodeAsync))" DisableUnderLine="true" />
                    </MudCardContent>
                </MudCard>
                <MudCard Outlined="true">
                    <MudCardContent>
                        <MudStack Row="true">
                            <MudSelect T="TeamMember" Label="Team Members" @bind-Value="_selectedTeamMember" ToStringFunc="@(teamMember => teamMember.Name)">
                                @foreach (var teamMember in _settings.TeamMembers)
                                {
                                    <MudSelectItem Value="@teamMember">
                                        <MudStack Row="true">
                                            <MudText>@teamMember.Name</MudText>
                                            <MudSpacer />
                                        </MudStack>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                            @if (_selectedTeamMember != null)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               OnClick="@(() => Dialog.Show<TeamMemberEditDialog>("Edit Team Member", new DialogParameters<TeamMemberEditDialog>() { { x => x.TeamMember, _selectedTeamMember }, { x => x.OnSave, OnTeamMemberEdited } }))" />
                                <MudIconButton OnClick="@(e => OnDeleteTeamMember(_selectedTeamMember))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                            }
                            <MudIconButton Icon="@Icons.Material.Filled.PersonAdd"
                                           Color="Color.Primary"
                                           OnClick="@(() => Dialog.Show<TeamMemberEditDialog>("New Team Member", new DialogParameters<TeamMemberEditDialog>() { { x => x.OnSave, OnTeamMemberAdded } }))" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudStack>
        </MudForm>
        <MudDivider />
        <Collapsable Title="Data">
            <MudStack Spacing="3">
                <MudStack Row="true">
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnExportData">Export Data</MudButton>
                    <MudSpacer />
                </MudStack>
                <Centered>
                    <MudFileUpload T="IBrowserFile" Accept=".json" FilesChanged="OnImportData" MaximumFileCount="100">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                Import Data
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                </Centered>
                <MudStack Row="true">
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnRestoreData">Restore Data</MudButton>
                    <MudSpacer />
                </MudStack>
            </MudStack>
        </Collapsable>
        <MudDivider />
        <Collapsable Title="Log">
            <MudStack>
                @foreach (var log in MemorySink.Instance.LogEvents)
                {
                    <MudText Align="Align.Center">@log.RenderMessage()</MudText>
                }
                <MudDivider/>
                <Centered>
                    <CopyContent TextToCopy="@(MemorySink.Instance.LogEvents.Select(_ => _.RenderMessage()).Aggregate((accumulated, next) => $"{accumulated}{Environment.NewLine}{next}"))" />
                </Centered>
            </MudStack>
        </Collapsable>
        <MudDivider />
        <MudText Align="Align.Center">Pay Annual Subscription<br />($1/mo or $12/year)</MudText>
        <Centered>
            <MudStack>
                <MudText Align="Align.Center">Send to <span style="color:@(Theme.PaletteDark.Secondary);">megaschool</span></MudText>
                <MudImage Src="/images/givbux-logo.png" Fluid="true" />
            </MudStack>
        </Centered>
    </MudStack>
</Loader>

@code {
    private readonly Regex ValidGivBuxCode = new (@"^([a-z]|\d)+$");

    private Repository.Model.Settings _settings = new();
    private TeamMember? _selectedTeamMember;
    private bool _dataValid;
    private SettingsViewModel _viewModel = new();
    private bool _loaded;

    private async Task<string?> ValidateGivBuxCodeAsync(string givBuxCode)
    {
        var validationError = Util.ValidateGivBuxCode(givBuxCode);

        if(validationError == null)
        {
            _settings.User = (_settings.User ?? new()) with { GivBuxCode = givBuxCode };

            await Repo.SaveSettingsAsync(_settings);

            AppState.User = (AppState.User ?? new()) with { GivBuxCode = givBuxCode };
        }

        return validationError;
    }

    private async Task OnImportData(IBrowserFile file)
    {
        // save backup
        var settings = await Repo.GetSettingsAsync();
        settings.Switch(
           async found =>
           {
               var userData = await Repo.GetUserDataAsync();
               var globalData = new GlobalData() { Settings = found, UserData = userData.IsT0 ? userData.AsT0 : null };
               await Repo.SaveGlobalDataBackupAsync(globalData);

               // load new file
               using var stream = file.OpenReadStream();
               using var reader = new StreamReader(stream);
               var data = await reader.ReadToEndAsync();
               var deserializedData = JsonSerializer.Deserialize<GlobalData>(data);

               await Repo.SaveSettingsAsync(deserializedData.Settings);
               await Repo.SaveUserDataAsync(deserializedData.UserData);

               var marketingDirector = await Repo.GetMarketingDirectorInfoAsync(deserializedData.Settings.User.MemberId);
               this.AppState!.User = Util.Sanitize(deserializedData.Settings.User, marketingDirector, deserializedData.Settings.User.GivBuxCode);

               this.StateHasChanged();
           },
           notFound => { Console.WriteLine($"{this.GetType().FullName} - No settings found in local storage!"); },
           error => { Console.WriteLine($"{this.GetType().FullName} - Failed to load settings{Environment.NewLine}{error.Value}"); }
       );
    }

    private async Task OnExportData()
    {
        var settings = await Repo.GetSettingsAsync();
        settings.Switch(
            async found =>
            {
                var userData = await Repo.GetUserDataAsync();
                var globalData = new GlobalData() { Settings = found, UserData = userData.IsT0 ? userData.AsT0 : null };

                using var stream = new MemoryStream(Encoding.UTF8.GetBytes(JsonSerializer.Serialize(globalData)));
                var fileName = $"MegaSchoolData-{DateTime.Now:yyyyMMdd}.json";

                using var streamRef = new DotNetStreamReference(stream: stream);

                await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            },
            notFound => { Console.WriteLine($"{this.GetType().FullName} - No settings found in local storage!"); },
            error => { Console.WriteLine($"{this.GetType().FullName} - Failed to load settings{Environment.NewLine}{error.Value}"); }
        );
    }

    private async Task OnRestoreData()
    {
        var globalData = await Repo.GetGlobalDataBackupAsync();
        globalData.Switch(
            async found =>
            {
                await Repo.SaveSettingsAsync(found.Settings);
                await Repo.SaveUserDataAsync(found.UserData);

                var marketingDirector = await Repo.GetMarketingDirectorInfoAsync(found.Settings.User.MemberId);
                this.AppState!.User = Util.Sanitize(found.Settings.User, marketingDirector, found.Settings.User.GivBuxCode);

                this.StateHasChanged();
            },
            notFound => { Console.WriteLine($"{this.GetType().FullName} - Failed to restore exported data!"); },
            error => { Console.WriteLine($"{this.GetType().FullName} - Failed to restore exported data!{Environment.NewLine}{error.Value}"); }
        );
    }

    protected override async Task OnInitializedAsync()
    {
        var settings = await Repo.GetSettingsAsync();
        settings.Switch(
            found =>
            {
                _settings = found;

                _selectedTeamMember = found.TeamMembers.FirstOrDefault();
                _viewModel.GivBuxCode = found.User?.GivBuxCode;

                _loaded = true;
            },
            notFound => { Console.WriteLine($"{this.GetType().FullName} - No settings found in local storage!"); },
            error => { Console.WriteLine($"{this.GetType().FullName} - Failed to load settings{Environment.NewLine}{error.Value}"); }
        );
    }

    private async Task OnDeleteTeamMember(TeamMember teamMember)
    {
        _settings.TeamMembers.Remove(teamMember);

        await Repo.SaveSettingsAsync(_settings);
    }

    private async Task OnTeamMemberAdded(TeamMember teamMember)
    {
        _settings.TeamMembers.Add(teamMember);
        this.StateHasChanged();

        await Repo.SaveSettingsAsync(_settings);
    }

    private async Task OnTeamMemberEdited(TeamMember teamMember)
    {
        this.StateHasChanged();

        await Repo.SaveSettingsAsync(_settings);
    }
}