@page "/settings"
@using FluentValidation
@using MegaSchool1.Dialog
@using MegaSchool1.Model
@using MegaSchool1.Repository.Model
@inherits Components.ComponentBase
@inject Repository.Repository Repo
@inject IDialogService Dialog

<MudStack Spacing="6">
    <MudStack Row="true">
        <MudSelect T="TeamMember" Label="Team Members" @bind-Value="_selectedTeamMember" ToStringFunc="@(teamMember => teamMember.Name)">
            @foreach (var teamMember in _settings.TeamMembers)
            {
                <MudSelectItem Value="@teamMember">
                    <MudStack Row="true">
                        <MudText>@teamMember.Name</MudText>
                        <MudSpacer/>
                    </MudStack>                  
                </MudSelectItem>
            }
        </MudSelect>
        @if (_selectedTeamMember != null)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                           Color="Color.Primary"
                           OnClick="@(() => Dialog.Show<TeamMemberEditDialog>("Edit Team Member", new DialogParameters<TeamMemberEditDialog>() { { x => x.TeamMember, _selectedTeamMember }, { x => x.OnSave, OnTeamMemberEdited } }))" />
            <MudIconButton OnClick="@(e => OnDeleteTeamMember(_selectedTeamMember))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
        }
        <MudIconButton Icon="@Icons.Material.Filled.PersonAdd" 
                       Color="Color.Primary"
                       OnClick="@(() => Dialog.Show<TeamMemberEditDialog>("New Team Member", new DialogParameters<TeamMemberEditDialog>() { { x => x.OnSave, OnTeamMemberAdded } }))" />
    </MudStack>
    <MudNavLink Href="https://cash.app/$MegaSchool1/12.00" Target="_blank" Icon="@Icons.Material.Filled.Payment">Pay Annual Subscription</MudNavLink>
</MudStack>

@code {
    private Repository.Model.Settings _settings = new();
    private TeamMember? _selectedTeamMember;

    protected override async Task OnInitializedAsync()
    {
        _settings = await Repo.GetSettingsAsync();

        _selectedTeamMember = _settings.TeamMembers.FirstOrDefault();
    }

    private async Task OnDeleteTeamMember(TeamMember teamMember)
    {
        _settings.TeamMembers.Remove(teamMember);

        await Repo.SaveSettingsAsync(_settings);
    }

    private async Task OnTeamMemberAdded(TeamMember teamMember)
    {
        _settings.TeamMembers.Add(teamMember);
        this.StateHasChanged();

        await Repo.SaveSettingsAsync(_settings);
    }

    private async Task OnTeamMemberEdited(TeamMember teamMember)
    {
        this.StateHasChanged();

        await Repo.SaveSettingsAsync(_settings);
    }
}