@page "/settings"
@using MegaSchool1.Components
@using MegaSchool1.Model
@using System.Text.Json
@using FluentValidation
@using MegaSchool1.Dialog
@using MegaSchool1.Model.Repository
@using MegaSchool1.Repository.Model
@using System.Text
@using System.Text.RegularExpressions
@using MegaSchool1.ViewModel
@inherits Components.ComponentBase
@inject Repository.Repository Repo
@inject IDialogService Dialog
@inject IJSRuntime JS

<MudStack Spacing="6">
    <MudForm @bind-IsValid="_dataValid">
        <MudStack Spacing="3">
            <MudCard Outlined="true">
                <MudCardContent>
                    <MudTextField @bind-Value="_settings.User.GivBuxCode" Label="My GivBux Code" Variant="Variant.Outlined" Immediate="true" Placeholder="GivBux Code" Validation="@(new Func<string,  Task<string?>>(ValidateGivBuxCodeAsync))" DisableUnderLine="true" />
                </MudCardContent>
            </MudCard>
            <MudCard Outlined="true">
                <MudCardContent>
                    <MudStack Row="true">
                        <MudSelect T="TeamMember" Label="Team Members" @bind-Value="_selectedTeamMember" ToStringFunc="@(teamMember => teamMember.Name)">
                            @foreach (var teamMember in _settings.TeamMembers)
                            {
                                <MudSelectItem Value="@teamMember">
                                    <MudStack Row="true">
                                        <MudText>@teamMember.Name</MudText>
                                        <MudSpacer />
                                    </MudStack>
                                </MudSelectItem>
                            }
                        </MudSelect>
                        @if (_selectedTeamMember != null)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Color="Color.Primary"
                                           OnClick="@(() => Dialog.Show<TeamMemberEditDialog>("Edit Team Member", new DialogParameters<TeamMemberEditDialog>() { { x => x.TeamMember, _selectedTeamMember }, { x => x.OnSave, OnTeamMemberEdited } }))" />
                            <MudIconButton OnClick="@(e => OnDeleteTeamMember(_selectedTeamMember))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                        }
                        <MudIconButton Icon="@Icons.Material.Filled.PersonAdd"
                                       Color="Color.Primary"
                                       OnClick="@(() => Dialog.Show<TeamMemberEditDialog>("New Team Member", new DialogParameters<TeamMemberEditDialog>() { { x => x.OnSave, OnTeamMemberAdded } }))" />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudStack>
    </MudForm>
    <MudDivider />
    <Collapsable Title="Data">
        <MudStack Spacing="3">
            <MudStack Row="true">
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnExportData">Export Data</MudButton>
                <MudSpacer />
            </MudStack>
            <Centered>
                <MudFileUpload T="IBrowserFile" Accept=".json" FilesChanged="OnImportData" MaximumFileCount="100">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context.Id">
                            Import Data
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </Centered>
            <MudStack Row="true">
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnRestoreData">Restore Data</MudButton>
                <MudSpacer />
            </MudStack>
        </MudStack>
    </Collapsable>
    <MudDivider />
    <MudText Align="Align.Center">Pay Annual Subscription<br/>($1/mo or $12/year)</MudText>
   <Centered>
        <MudStack>
            <MudImage Src="/images/givbux-logo.png" Fluid="true" />
            <MudText Align="Align.Center">Send to <span style="color:@(Theme.Palette.Secondary);">megaschool</span></MudText>
        </MudStack>
   </Centered>
</MudStack>

@code {
    private readonly Regex ValidGivBuxCode = new (@"^([a-z]|\d)+$");

    private Repository.Model.Settings _settings = new();
    private TeamMember? _selectedTeamMember;
    private bool _dataValid;

    private async Task<string?> ValidateGivBuxCodeAsync(string givBuxCode)
    {
        var validationError = Util.ValidateGivBuxCode(givBuxCode);

        if(validationError == null)
        {
            await SaveAsync();

            AppState.User = _settings.User;
        }

        return validationError;
    }

    private async Task SaveAsync()
    {
        await Repo.SaveSettingsAsync(_settings);
    }

    private async Task OnImportData(IBrowserFile file)
    {
        // save backup
        var settings = await Repo.GetSettingsAsync();
        var userData = await Repo.GetUserDataAsync();
        var globalData = new GlobalData() { Settings = settings, UserData = userData };
        await Repo.SaveGlobalDataBackupAsync(globalData);

        // load new file
        using var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream);
        var data = await reader.ReadToEndAsync();
        var deserializedData = JsonSerializer.Deserialize<GlobalData>(data);

        await Repo.SaveSettingsAsync(deserializedData.Settings);
        await Repo.SaveUserDataAsync(deserializedData.UserData);

        var marketingDirector = await Repo.GetMarketingDirectorInfoAsync(deserializedData.Settings.User.MemberId);
        this.AppState!.User = Util.Sanitize(deserializedData.Settings.User, marketingDirector, deserializedData.Settings.User.GivBuxCode);

        this.StateHasChanged();
    }

    private async Task OnExportData()
    {
        var settings = await Repo.GetSettingsAsync();
        var userData = await Repo.GetUserDataAsync();
        var globalData = new GlobalData() { Settings = settings, UserData = userData };

        using var stream = new MemoryStream(Encoding.UTF8.GetBytes(JsonSerializer.Serialize(globalData)));
        var fileName = $"MegaSchoolData-{DateTime.Now:yyyyMMdd}.json";

        using var streamRef = new DotNetStreamReference(stream: stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task OnRestoreData()
    {
        var globalData = await Repo.GetGlobalDataBackupAsync();

        await Repo.SaveSettingsAsync(globalData.Settings);
        await Repo.SaveUserDataAsync(globalData.UserData);

        var marketingDirector = await Repo.GetMarketingDirectorInfoAsync(globalData.Settings.User.MemberId);
        this.AppState!.User = Util.Sanitize(globalData.Settings.User, marketingDirector, globalData.Settings.User.GivBuxCode);

        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _settings = await Repo.GetSettingsAsync();

        _selectedTeamMember = _settings.TeamMembers.FirstOrDefault();
    }

    private async Task OnDeleteTeamMember(TeamMember teamMember)
    {
        _settings.TeamMembers.Remove(teamMember);

        await Repo.SaveSettingsAsync(_settings);
    }

    private async Task OnTeamMemberAdded(TeamMember teamMember)
    {
        _settings.TeamMembers.Add(teamMember);
        this.StateHasChanged();

        await Repo.SaveSettingsAsync(_settings);
    }

    private async Task OnTeamMemberEdited(TeamMember teamMember)
    {
        this.StateHasChanged();

        await Repo.SaveSettingsAsync(_settings);
    }
}