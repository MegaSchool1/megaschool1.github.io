@inherits LayoutComponentBase
@using Blazored.LocalStorage
@using MegaSchool1.Dialog
@using MegaSchool1.Model
@implements IDisposable
@inject NavigationManager MyNavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Repository.Repository Repo
@inject ILocalStorageService LocalStorage
@inject IDialogService Dialog

<PageTitle>@((IsMoneyChallengePage ? "72-Hour Money Challenge!" : "Mega School 1"))</PageTitle>

<MudThemeProvider IsDarkMode="true"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@if (IsMoneyChallengePage)
{
    <div class="page mud-layout" style="background-color:rgb(22,19,44);">

        <main>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-2 pt-2">
                @Body
            </MudContainer>
        </main>
    </div>
}
else
{
    <div class="page mud-layout">

        <div class="sidebar mud-elevation-1">
            <div class="top-row mud-drawer-head" style="background-color:@(Colors.Green.Default);">
                <div>
                    <a href="https://www.ms1.megaschool.me/" target="_blank" class="ml-2 navbar-brand">Mega School 1</a>
                </div>
            </div>

            <input type="checkbox" title="Navigation menu" class="navbar-toggler" />
            <div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
                <CascadingValue Value="_appState">
                    <NavMenu />
                </CascadingValue>
            </div>

        </div>

        <main>
            <div class="top-row px-4" style="background-color:@(Colors.Green.Default);">
                <MudStack Row="true" Style="width:100%;">
                    @if (_componentInitialized && _appState.AppIsInstallable)
                    {
                        <MudButton OnClick="OnInstallClick" EndIcon="@Icons.Material.Filled.InstallMobile" Variant="Variant.Filled" Color="Color.Primary">Install</MudButton>
                    }
                    else
                    {
                        <MudStack Row="true">
                            <MudText Style="color:white;">Hello @_appState.UserName! <MudIconButton OnClick="OnShowMembershipEnrollmentDialog" Icon="@Icons.Material.Filled.Edit" /></MudText>
                        </MudStack>
                    }
                    <MudSpacer />
                    <MudText Style="color:white;">@GetTitle()</MudText>
                </MudStack>
            </div>

            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-2 pt-2">
                <CascadingValue Value="_appState">
                    @Body
                    @if (_showAppUpdatePrompt)
                    {
                        <MudFab Style="position:fixed; bottom:0; right:0; padding-right:5;"
                                Color="Color.Primary"
                                EndIcon="@Icons.Material.Filled.Refresh"
                                OnClick="@(e => NavigationManager.NavigateTo(NavigationManager.BaseUri, true))"
                                Label="Load Update" />
                    }
                    <MudScrollToTop>
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
                    </MudScrollToTop>
                </CascadingValue>
            </MudContainer>
        </main>
    </div>
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private static MainLayout? Instance;

    private readonly AppState _appState = new();

    private bool _showAppUpdatePrompt;
    private bool _componentInitialized;
    private DotNetObjectReference<MainLayout>? _thisComponentReference;

    public void Dispose()
    {
        _thisComponentReference?.Dispose();
    }

    private bool IsMoneyChallengePage => NavigationManager.Uri.Contains("/72/");

    private void OnShowMembershipEnrollmentDialog()
    {
        var parameters = new DialogParameters<EditUsernameDialog> { { x => x.AppState, _appState } };
        var options = new DialogOptions() { NoHeader = true };

        Dialog.Show<EditUsernameDialog>("72-Hour Money Challenge", parameters, options);
    }

    protected async void OnInstallClick()
    {
        _thisComponentReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("promptToInstall", _thisComponentReference);
    }

    protected override async Task OnInitializedAsync()
    {
        _componentInitialized = true;

        // get username
        _appState.UserName = await Repo.GetUsernameAsync(LocalStorage, Http) ?? _appState.UserName;

        // start checking for updates
        _ = CheckForUpdatesAsync();

        // show install button if applicable
        var maxInstallationStatusWaitTime = Task.Delay(10 * 1000);
        var keepCheckingInstallationStatus = true;
        while (keepCheckingInstallationStatus && !maxInstallationStatusWaitTime.IsCompleted)
        {
            var installationStatusReady = await JSRuntime.InvokeAsync<bool>("appInstallationStatusReady");
            if (installationStatusReady)
            {
                _appState.AppIsInstallable = (await JSRuntime.InvokeAsync<bool>("appIsInstallable"));
                keepCheckingInstallationStatus = false;
            }
            else
            {
                await Task.Delay(2 * 1000);
            }
        }

        Instance = this;
    }

    public static void Refresh()
    {
        Instance?.StateHasChanged();
    }

    private async Task CheckForUpdatesAsync()
    {
        while (true)
        {
            var updateAvailable = await Util.UpdateAvailableAsync(Http);
            if(updateAvailable)
            {
                _showAppUpdatePrompt = true;
                this.StateHasChanged();
            }

            // check for updates every 5 minutes
            await Task.Delay(TimeSpan.FromMinutes(5));
        }
    }

    [JSInvokable]
    public static void OnAppInstalled()
    {
        if (Instance != null)
        {
             _ = Instance.InvokeAsync(() =>
             {
                 Instance._appState.AppIsInstallable = false;
                 Instance.StateHasChanged();
             });
        }
    }

    private string GetTitle()
    {
        var page = MyNavigationManager.ToBaseRelativePath(MyNavigationManager.Uri);

        return page switch
        {
            "" => "Words",
            "ipr" => "Instant Pay Raise",
            "shareables" => "Shareables",
            "settings" => "Settings",
            "faststartchecklist" => "Fast Start Checklist",
            "revenuesharing" => "Revenue Sharing",
            "events" => "Events",
            "pipleline" => "Pipeline",
            "testimonials" => "Testimonials",
            "wealthmap" => "Wealth Map",
            "carpurchase" => "First Car Purchase",
            "par" => "Personal Activity Report",
            "experimental" => "Experimental",
            _ => string.Empty
        };
    }
}