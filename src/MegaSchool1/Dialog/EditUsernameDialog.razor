@using Blazored.LocalStorage
@using MegaSchool1.Model
@using MegaSchool1.Repository.Model
@using OneOf.Types
@inject Repository.Repository Repo
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <MudForm @bind-IsValid="@_dataValid">
            <MudStack>
                <MudTextField @bind-Value="@_username"
                              Label="My MWR Username"
                              Placeholder="Your MWR username"
                              HelperText="@HelperText"
                              Validation="@(new Func<string, Task<string?>>(ValidateUsernameAsync))"
                              Required="true"
                              RequiredError="MWR username is required."
                              Immediate="true"
                              DebounceInterval="1.0" />
                <br/>
                <br/>
                <MudTooltip Text="Saved!" Visible="_showTooltip" ShowOnClick="true" ShowOnFocus="false" ShowOnHover="false">
                    <MudButton OnClick="OnUsernameSaveClick" Disabled="@(!_dataValid)" EndIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                </MudTooltip>
            </MudStack>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    private readonly string HelperText = $"Tip: If your website is '{Constants.MarketingDirectorUrlEnglish("ScoobyDoo")}' then your username is 'ScoobyDoo'";

    private bool _showTooltip;
    private bool _dataValid;
    private string? _username;

    [CascadingParameter] 
    private MudDialogInstance? MudDialog { get; set; }

    private AppState? _appState;
    [Parameter]
    public AppState? AppState
    {
        get => _appState;
        set
        {
            _username = value?.User?.MemberId;

            _appState = value;
        }
    }

    private async Task<string?> ValidateUsernameAsync(string username)
    {
        _dataValid = false;
        this.StateHasChanged();

        var oldMemberId = this.AppState?.User?.MemberId;
        if(oldMemberId == null)
        {
            return null;
        }
        else
        {
            var marketingDirector = await Repo.GetMarketingDirectorInfoAsync(username);
            var memberIdValidationError = Util.ValidateMemberIdChange(oldMemberId, (username, marketingDirector));

            var validationError = memberIdValidationError.Match(
                memberDoesNotExist => (string?)memberDoesNotExist.Message,
                memberIdNotSet => (string?)memberIdNotSet.Message,
                _ => null
            );

            return validationError;
        }
    }

    private async Task OnUsernameSaveClick()
    {
        async Task Update(Settings settings)
        {
            var marketingDirector = await Repo.GetMarketingDirectorInfoAsync(_username!);
            settings.User = Util.Sanitize((settings.User ?? new()) with { MemberId = _username!, Name = null }, marketingDirector, settings.User?.GivBuxCode);

            await Repo.SaveSettingsAsync(settings);

            this.AppState!.User = settings.User;
            this.StateHasChanged();

            MainLayout.Refresh();
            this.MudDialog?.Close();

            _showTooltip = true;
            this.StateHasChanged();

            await Task.Delay(3 * 1000);

            _showTooltip = false;
            this.StateHasChanged();
        }

        var settings = await Repo.GetSettingsAsync();
        settings            
            .MapT0(found => Update(found))
            .MapT1(notFound => Update(new()))
            .Switch(
                _ => { },
                _ => { },
                error => { Console.WriteLine($"{this.GetType().FullName} - Failed to save user name.{Environment.NewLine}{error.Value}"); }
        );
    }
}
